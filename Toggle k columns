using namespace std;
int n,m,k;

int main() {
    cin>>n>>m>>k;
    unordered_map<string,int>mp;
    for(int i=0;i<n;i++){
        string s;
        for(int j=0;j<m;j++){
            char ch;cin>>ch;
            s.push_back(ch);
        }
        mp[s]++;
    }
    // max freq of string having same init config
    // due to xor property: (k-zero)%==0 && k>=zero
    int ans=0;
    for(auto &it: mp){
        int zero=0;
        for(auto &iit:it.first) zero+=(iit=='0');
        if((k-zero)%2==0 && k>=zero){
            ans= max(ans, it.second);
        }        
    }
    cout<<ans<<"\n";
    return 0;
}
// backtrack will pass as constraints are small , moreover not allowed to use stl..
#include<bits/stdc++.h>
using namespace std;
void toggle (vector<vector<int> >&v, int i){
    int n = v.size();
    for(int j=0;j<n;j++){
        v[j][i] = !(v[j][i]);
    }
}
int count(vector<vector<int> >&v){
    int count = 0;
    int n = v.size();
    int m = v[0].size();
    for(int i=0;i<n;i++){
        int flag = 0;
        for (int j=0;j<m;j++){
            if(v[i][j]==0){
                flag = 1;
                break;
            }
        }
        if(!flag){
            count++;
        }
    }
    return count;
}
void backtrack(vector<vector<int> >&v, int& ans, int k){
    if(k<=0){
        ans = max(ans,count(v));
        return;
    }
    for(int i=0;i<v[0].size();i++){
        toggle(v,i);
        backtrack(v,ans,k-1);
        toggle(v,i);
    }
}
int main(){
    int n,m,k;
    cin>>n>>m>>k;
    vector<vector<int> >v(n,vector<int>(m));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin>>v[i][j];
        }
    }
    int ans = 0;
    backtrack(v,ans,k);
    cout<<ans<<endl;
}
